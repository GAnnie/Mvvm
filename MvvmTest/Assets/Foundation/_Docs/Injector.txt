*****************************
Unity3d Foundation : The Injector
*****************************

The Injector is a static application service for resolving dependencies.
Objects may be added to the injector as "Exports" and then these exports
may be "Imported" into consumers worry free.

- Supports inheritance for resolving dependencies using an interface or base class.

- Supports string keys. resolve dependencies by a magic string.

- Supports GetFirst and GetAll. Get all of a exported dependency type. 

- Supports [Import] annotation. Using this annotation unlocks the Import(object) helper method.
  This helper method allows for the importing of all decorated members automagically.

- Consumers may subscribe. Once subscribed imported members will be updated as items are added / removed from the injector.
  This allows for conducting all setup in Awake worry free.

- Use the [InjectorService] annotation on singlton services or ScriptableObjects and they will be loaded as needed for you.
  
*****************************
Exporting
*****************************

Exporting is the process of adding instances to the injector for use elsewhere.

    // Optional, Add a string Key
    [Export("MagicString")]

    // This export may also resolved by asking for MyExport, MonoBehaviour or IMyExport
    // in the GetAll or GetFirst method.
    public class MyExport: MonoBehaviour, IMyExport
    {
        void Awake()
        {
            // add this to the injector
            Injector.AddExport(this);
        }

        // Use this for initialization
        void OnDestroy()
        {
            // Remove this from the injector
            Injector.RemoveExport(this);
        }
}


*****************************
Exporting Scriptable Objects
*****************************

[InjectorService("ResourceName")]
public class MyScriptableObject : ScriptableObject{
	// Loaded at runtime for you !
}

*****************************
Exporting Singltons
*****************************

[InjectorService]
public class MyService {

	// Loaded at runtime for you !
	public static MyService { get { ... } }
}

*****************************
Importing
*****************************

Importing is the process of consuming an export.


    public class MyConsumer: MonoBehaviour
    {
		// Import using the Key
        [Import("MagicString")]
        public IMyExport Import1 { get; set; }

		// Import many using the Key
        [Import("MagicString")]
        public IEnumerable<IMyExport> Import2 { get; set; }

		// Import first by type
        [Import]
        public IMyExport Import3 { get; set; }

		// Import all by type
        [Import]
        public IEnumerable<IMyExport> Import4 { get; set; }

        void Awake()
        {
			// Asks the Injector to resolve dependencies now
			Injector.Import(this);

			// or
	
			// Asks the Injector to resolve dependencies now and later
			// Members will be updated if items are added / removed from export
			Injector.Subscribe(this);
        }

        void Start()
        {	
			// Get import manually
			var manualImport = Injector.GetFirst<IMyExport>();
			// Get imports manually
			var manualImports = Injector.GetAll<IMyExport>();
        }

        void OnDestroy()
        {	
			  // Removes subscription
			  Injector.Unsubscribe(this);
        }
	}